# RP2040 Flash Bootloader in Rust

The RP2040 uses a two-stage bootloader scheme, where ROM loads the first 256
bytes from an attached Flash chip into RAM and executes it. That 256 byte
program is responsible for setting up Flash to run the _rest_ of the code.

Normally this program is written in assembly language. I was curious to see if
it could be done in Rust.

Spoiler: it appears that the answer is yes.

## Building the bootloader images.

Currently built:

- Winbond W25Q080 (and similar), as seen on the Pi Pico.
- GigaDevices GD25Q64CS (and similar), as seen on certain Adafruit boards.
- Adesto AT25SF128A, untested.

You do not need the ARM GCC toolchain or binutils installed.

Run the `build-all.sh` script inside the repo. This will build the bootloader
for each supported flash chip, as well as the `bootcrc` tool which converts its
ELF file into the format expected by the RP2040.

Bootloader binary files are deposited into the `bin` directory.

## Constraints

The bootloader needs to fit into 256 bytes (well, technically 252, unless you
can devise a program whose final two instructions are also its CRC). To save
space, I have chosen to not initialize RAM (data/bss). This means the bootloader
must not use it. Only stack is permitted. This makes it slightly hard to use the
PACs, which like global variables, but, it can be done. The linker script will
fail the build if you accidentally use RAM.

The toolchain version is pinned. I recommend this as a general practice, but
it's even _more_ important in this case because small code generation changes
that go unnoticed by desktop Rust developers could blow our size budget. The
bootloader is known to fit when built with this toolchain only. It _might_ build
with other toolchains. Such is our lot as embedded developers.
