# RP2040 Flash Bootloader in Rust

The RP2040 uses a two-stage bootloader scheme, where ROM loads the first 256
bytes from an attached Flash chip into RAM and executes it. That 256 byte
program is responsible for setting up Flash to run the _rest_ of the code.

Normally this program is written in assembly language. I was curious to see if
it could be done in Rust.

Spoiler: it appears that the answer is yes.

## Building the bootloader images.

Currently built:

- Winbond W25Q080 (and similar), as seen on the Pi Pico.
- GigaDevices GD25Q64CS (and similar), as seen on certain Adafruit boards.
- Adesto AT25SF128A, untested.

You do not need the ARM GCC toolchain or binutils installed.

Run the `build-all.sh` script inside the repo. This will build the bootloader
for each supported flash chip, as well as the `bootcrc` tool which converts its
ELF file into the format expected by the RP2040.

Bootloader binary files are deposited into the `bin` directory.
